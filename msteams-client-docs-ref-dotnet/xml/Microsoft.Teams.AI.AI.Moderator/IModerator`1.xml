<Type Name="IModerator&lt;TState&gt;" FullName="Microsoft.Teams.AI.AI.Moderator.IModerator&lt;TState&gt;">
  <TypeSignature Language="C#" Value="public interface IModerator&lt;TState&gt; where TState : TurnState" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IModerator`1&lt;(class Microsoft.Teams.AI.State.TurnState) TState&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Teams.AI.AI.Moderator.IModerator`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IModerator(Of TState)" />
  <TypeSignature Language="F#" Value="type IModerator&lt;'State (requires 'State :&gt; TurnState)&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Teams.AI</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TState">
      <Constraints>
        <BaseTypeName>Microsoft.Teams.AI.State.TurnState</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TState">Type of the applications turn state.</typeparam>
    <summary>
            A moderator is responsible for reviewing and approving AI prompts and plans.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ReviewInputAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planners.Plan?&gt; ReviewInputAsync (Microsoft.Bot.Builder.ITurnContext turnContext, TState turnState, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Teams.AI.AI.Planners.Plan&gt; ReviewInputAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, !TState turnState, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.Moderator.IModerator`1.ReviewInputAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReviewInputAsync (turnContext As ITurnContext, turnState As TState, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Plan)" />
      <MemberSignature Language="F#" Value="abstract member ReviewInputAsync : Microsoft.Bot.Builder.ITurnContext * 'State * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planners.Plan&gt;" Usage="iModerator.ReviewInputAsync (turnContext, turnState, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planners.Plan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="turnState" Type="TState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">Context for the current turn of conversation.</param>
        <param name="turnState">Application state for the current turn of conversation.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
        <summary>
             Reviews an incoming utterance and generated prompt before it's sent to the planner.
             </summary>
        <returns>A null value to approve the prompt or a new plan to redirect to if not approved.</returns>
        <remarks>
             The moderator can review the incoming utterance for things like prompt injection attacks
             or the leakage of sensitive information. The moderator can also review the generated prompt
             to ensure it's appropriate for the current conversation.
            
             To approve a prompt, simply return null. Returning a new plan bypasses the planner and
             redirects to a new set of actions. Typically the moderator will return a new plan with a
             single DO command that calls <see cref="F:Microsoft.Teams.AI.AI.AIConstants.FlaggedInputActionName" /> to flag the input for review.
            
             The moderator can pass any parameters that make sense to the redirected action.
             </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReviewOutputAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planners.Plan&gt; ReviewOutputAsync (Microsoft.Bot.Builder.ITurnContext turnContext, TState turnState, Microsoft.Teams.AI.AI.Planners.Plan plan, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Teams.AI.AI.Planners.Plan&gt; ReviewOutputAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, !TState turnState, class Microsoft.Teams.AI.AI.Planners.Plan plan, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.Moderator.IModerator`1.ReviewOutputAsync(Microsoft.Bot.Builder.ITurnContext,`0,Microsoft.Teams.AI.AI.Planners.Plan,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReviewOutputAsync (turnContext As ITurnContext, turnState As TState, plan As Plan, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Plan)" />
      <MemberSignature Language="F#" Value="abstract member ReviewOutputAsync : Microsoft.Bot.Builder.ITurnContext * 'State * Microsoft.Teams.AI.AI.Planners.Plan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planners.Plan&gt;" Usage="iModerator.ReviewOutputAsync (turnContext, turnState, plan, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Teams.AI.AI.Planners.Plan&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="turnState" Type="TState" />
        <Parameter Name="plan" Type="Microsoft.Teams.AI.AI.Planners.Plan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">Context for the current turn of conversation.</param>
        <param name="turnState">Application state for the current turn of conversation.</param>
        <param name="plan">Plan generated by the planner.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
             or threads to receive notice of cancellation.</param>
        <summary>
             Reviews a plan generated by the planner before its executed.
             </summary>
        <returns>The plan to execute. Either the current plan passed in for review or a new plan.</returns>
        <remarks>
             The moderator can review the plan to ensure it's appropriate for the current conversation.
            
             To approve a plan simply return the plan that was passed in. A new plan can be returned to
             redirect to a new set of actions. Typically the moderator will return a new plan with a
             single DO command that calls <see cref="F:Microsoft.Teams.AI.AI.AIConstants.FlaggedOutputActionName" /> to flag the output for review.
            
             The moderator can pass any parameters that make sense to the redirected action.
             </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
