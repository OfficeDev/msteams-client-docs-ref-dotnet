<Type Name="TeamsBotSsoPrompt" FullName="Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt">
  <TypeSignature Language="C#" Value="public class TeamsBotSsoPrompt : Microsoft.Bot.Builder.Dialogs.Dialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TeamsBotSsoPrompt extends Microsoft.Bot.Builder.Dialogs.Dialog" />
  <TypeSignature Language="DocId" Value="T:Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt" />
  <TypeSignature Language="VB.NET" Value="Public Class TeamsBotSsoPrompt&#xA;Inherits Dialog" />
  <TypeSignature Language="F#" Value="type TeamsBotSsoPrompt = class&#xA;    inherit Dialog" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.TeamsFx</AssemblyName>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Microsoft.Bot.Builder.Dialogs.Dialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
             Creates a new prompt that leverage Teams Single Sign On (SSO) support for bot to automatically sign in user and
             help receive oauth token, asks the user to consent if needed.
             </summary>
    <remarks>
             The prompt will attempt to retrieve the user's current token of the desired scopes.
             User will be automatically signed in leveraging Teams support of Bot Single Sign On(SSO):
             https://docs.microsoft.com/en-us/microsoftteams/platform/bots/how-to/authentication/auth-aad-sso-bots
             </remarks>
    <example>
             ## Prompt Usage
            
             When used with your bot's <see cref="T:Microsoft.Bot.Builder.Dialogs.DialogSet" /> you can simply add a new instance of the prompt as a named
             dialog using <see cref="M:Microsoft.Bot.Builder.Dialogs.DialogSet.Add(Microsoft.Bot.Builder.Dialogs.Dialog)" />. You can then start the prompt from a waterfall step using either
             <see cref="M:Microsoft.Bot.Builder.Dialogs.DialogContext.BeginDialogAsync(System.String,System.Object,System.Threading.CancellationToken)" /> or
             <see cref="M:Microsoft.Bot.Builder.Dialogs.DialogContext.PromptAsync(System.String,Microsoft.Bot.Builder.Dialogs.PromptOptions,System.Threading.CancellationToken)" />. The user
             will be prompted to signin as needed and their access token will be passed as an argument to
             the caller's next waterfall step.
             
             <code>
             var convoState = new ConversationState(new MemoryStorage());
             var dialogState = convoState.CreateProperty&lt;DialogState&gt;("dialogState");
             var dialogs = new DialogSet(dialogState); 
             var botAuthOptions = new BotAuthenticationOptions { 
                 ClientId = "{client_id_guid_value}", 
                 ClientSecret = "{client_secret_value}", 
                 TenantId = "{tenant_id_guid_value}", 
                 ApplicationIdUri = "{application_id_uri_value}", 
                 OAuthAuthority = "https://login.microsoftonline.com/{tenant_id_guid_value}", 
                 LoginStartPageEndpoint = "https://{bot_web_app_domain}/bot-auth-start" 
                 };
                 
             var scopes = new string[] { "User.Read" };
             var teamsBotSsoPromptSettings = new TeamsBotSsoPromptSettings(botAuthOptions, scopes);
             
             dialogs.Add(new TeamsBotSsoPrompt("{unique_id_for_the_prompt}", teamsBotSsoPromptSettings)); 
             dialogs.Add(new WaterfallDialog(nameof(WaterfallDialog), new WaterfallStep[] 
             { 
                 async(WaterfallStepContext stepContext, CancellationToken cancellationToken) =&gt; {
                     return await stepContext.BeginDialogAsync(nameof(TeamsBotSsoPrompt), null, cancellationToken);
                 }, 
                 async(WaterfallStepContext stepContext, CancellationToken cancellationToken) =&gt; { 
                     var tokenResponse = (TeamsBotSsoPromptTokenResponse)stepContext.Result; 
                     if (tokenResponse?.Token != null) 
                     { 
                         // ... continue with task needing access token ... 
                     } 
                     else
                     {
                         await stepContext.Context.SendActivityAsync(MessageFactory.Text("Login was not successful please try again."), cancellationToken);
                     }
                     return await stepContext.EndDialogAsync(cancellationToken: cancellationToken); 
                 } 
             }));
             </code></example>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TeamsBotSsoPrompt (string dialogId, Microsoft.TeamsFx.Bot.TeamsBotSsoPromptSettings settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string dialogId, class Microsoft.TeamsFx.Bot.TeamsBotSsoPromptSettings settings) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt.#ctor(System.String,Microsoft.TeamsFx.Bot.TeamsBotSsoPromptSettings)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (dialogId As String, settings As TeamsBotSsoPromptSettings)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt : string * Microsoft.TeamsFx.Bot.TeamsBotSsoPromptSettings -&gt; Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt" Usage="new Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt (dialogId, settings)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dialogId" Type="System.String" />
        <Parameter Name="settings" Type="Microsoft.TeamsFx.Bot.TeamsBotSsoPromptSettings" />
      </Parameters>
      <Docs>
        <param name="dialogId">The ID to assign to this prompt.</param>
        <param name="settings">Additional OAuth settings to use with this instance of the prompt.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt" /> class.
            </summary>
        <remarks>The value of <paramref name="dialogId" /> must be unique within the
            <see cref="T:Microsoft.Bot.Builder.Dialogs.DialogSet" /> or <see cref="T:Microsoft.Bot.Builder.Dialogs.ComponentDialog" /> to which the prompt is added.</remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InvalidParameter">When input parameters is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginDialogAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; BeginDialogAsync (Microsoft.Bot.Builder.Dialogs.DialogContext dialogContext, object options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; BeginDialogAsync(class Microsoft.Bot.Builder.Dialogs.DialogContext dialogContext, object options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt.BeginDialogAsync(Microsoft.Bot.Builder.Dialogs.DialogContext,System.Object,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function BeginDialogAsync (dialogContext As DialogContext, Optional options As Object = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of DialogTurnResult)" />
      <MemberSignature Language="F#" Value="override this.BeginDialogAsync : Microsoft.Bot.Builder.Dialogs.DialogContext * obj * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;" Usage="teamsBotSsoPrompt.BeginDialogAsync (dialogContext, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dialogContext" Type="Microsoft.Bot.Builder.Dialogs.DialogContext" />
        <Parameter Name="options" Type="System.Object" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dialogContext">The Microsoft.Bot.Builder.Dialogs.DialogContext for the current turn of conversation.</param>
        <param name="options">Optional, initial information to pass to the dialog.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        <summary>
            Called when the dialog is started and pushed onto the dialog stack.
            </summary>
        <returns> A System.Threading.Tasks.Task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InvalidParameter">if dialog context argument is null</exception>
      </Docs>
    </Member>
    <Member MemberName="ContinueDialogAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; ContinueDialogAsync (Microsoft.Bot.Builder.Dialogs.DialogContext dc, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt; ContinueDialogAsync(class Microsoft.Bot.Builder.Dialogs.DialogContext dc, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.Bot.TeamsBotSsoPrompt.ContinueDialogAsync(Microsoft.Bot.Builder.Dialogs.DialogContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ContinueDialogAsync (dc As DialogContext, Optional cancellationToken As CancellationToken = Nothing) As Task(Of DialogTurnResult)" />
      <MemberSignature Language="F#" Value="override this.ContinueDialogAsync : Microsoft.Bot.Builder.Dialogs.DialogContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;" Usage="teamsBotSsoPrompt.ContinueDialogAsync (dc, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Bot.Builder.Dialogs.DialogTurnResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dc" Type="Microsoft.Bot.Builder.Dialogs.DialogContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="dc">The <see cref="T:Microsoft.Bot.Builder.Dialogs.DialogContext" /> for the current turn of conversation.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
        <summary>
            Called when a prompt dialog is the active dialog and the user replied with a new activity.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
        <remarks>If the task is successful, the result indicates whether the dialog is still
            active after the turn has been processed by the dialog.
            <para>The prompt generally ends on invalid message from user's reply.</para></remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InternalError">When failed to login with unknown error.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.ServiceError">When failed to get access token from identity server(AAD).</exception>
      </Docs>
    </Member>
  </Members>
</Type>
