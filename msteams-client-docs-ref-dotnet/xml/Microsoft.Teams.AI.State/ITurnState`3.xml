<Type Name="ITurnState&lt;TConversationState,TUserState,TTempState&gt;" FullName="Microsoft.Teams.AI.State.ITurnState&lt;TConversationState,TUserState,TTempState&gt;">
  <TypeSignature Language="C#" Value="public interface ITurnState&lt;out TConversationState,out TUserState,out TTempState&gt; where TConversationState : class where TUserState : class where TTempState : TempState" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITurnState`3&lt;class + TConversationState, class + TUserState, (class Microsoft.Teams.AI.State.TempState) + TTempState&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Teams.AI.State.ITurnState`3" />
  <TypeSignature Language="VB.NET" Value="Public Interface ITurnState(Of Out TConversationState, Out TUserState, Out TTempState)" />
  <TypeSignature Language="F#" Value="type ITurnState&lt;'ConversationState, 'UserState, 'empState (requires 'ConversationState : null and 'UserState : null and 'empState :&gt; TempState)&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Teams.AI</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TConversationState">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TUserState">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
    <TypeParameter Name="TTempState">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
        <BaseTypeName>Microsoft.Teams.AI.State.TempState</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TConversationState">The conversation state class.</typeparam>
    <typeparam name="TUserState">The user state class.</typeparam>
    <typeparam name="TTempState">The temp state class.</typeparam>
    <summary>
            The turn state interface.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Conversation">
      <MemberSignature Language="C#" Value="public TConversationState? Conversation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TConversationState Conversation" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Teams.AI.State.ITurnState`3.Conversation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Conversation As TConversationState" />
      <MemberSignature Language="F#" Value="member this.Conversation : 'ConversationState" Usage="Microsoft.Teams.AI.State.ITurnState&lt;'ConversationState, 'UserState, 'empState (requires 'ConversationState : null and 'UserState : null and 'empState :&gt; Microsoft.Teams.AI.State.TempState)&gt;.Conversation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TConversationState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the conversation state.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; LoadStateAsync (Microsoft.Bot.Builder.IStorage? storage, Microsoft.Bot.Builder.ITurnContext turnContext, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; LoadStateAsync(class Microsoft.Bot.Builder.IStorage storage, class Microsoft.Bot.Builder.ITurnContext turnContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.State.ITurnState`3.LoadStateAsync(Microsoft.Bot.Builder.IStorage,Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadStateAsync (storage As IStorage, turnContext As ITurnContext, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="abstract member LoadStateAsync : Microsoft.Bot.Builder.IStorage * Microsoft.Bot.Builder.ITurnContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="iTurnState.LoadStateAsync (storage, turnContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storage" Type="Microsoft.Bot.Builder.IStorage" />
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="storage">Optional. Storage provider to load state scopes from.</param>
        <param name="turnContext">Context for the current turn of conversation with the user.</param>
        <param name="cancellationToken" />
        <summary>
            Loads all of the state scopes for the current turn.
            </summary>
        <returns>True if the states need to be loaded.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveStateAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SaveStateAsync (Microsoft.Bot.Builder.IStorage? storage, Microsoft.Bot.Builder.ITurnContext turnContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SaveStateAsync(class Microsoft.Bot.Builder.IStorage storage, class Microsoft.Bot.Builder.ITurnContext turnContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.State.ITurnState`3.SaveStateAsync(Microsoft.Bot.Builder.IStorage,Microsoft.Bot.Builder.ITurnContext)" />
      <MemberSignature Language="VB.NET" Value="Public Function SaveStateAsync (storage As IStorage, turnContext As ITurnContext) As Task" />
      <MemberSignature Language="F#" Value="abstract member SaveStateAsync : Microsoft.Bot.Builder.IStorage * Microsoft.Bot.Builder.ITurnContext -&gt; System.Threading.Tasks.Task" Usage="iTurnState.SaveStateAsync (storage, turnContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storage" Type="Microsoft.Bot.Builder.IStorage" />
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
      </Parameters>
      <Docs>
        <param name="storage">Optional. Storage provider to save state scopes to.</param>
        <param name="turnContext">Context for the current turn of conversation with the user.</param>
        <summary>
            Saves all of the state scopes for the current turn.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Temp">
      <MemberSignature Language="C#" Value="public TTempState? Temp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TTempState Temp" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Teams.AI.State.ITurnState`3.Temp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Temp As TTempState" />
      <MemberSignature Language="F#" Value="member this.Temp : 'empState" Usage="Microsoft.Teams.AI.State.ITurnState&lt;'ConversationState, 'UserState, 'empState (requires 'ConversationState : null and 'UserState : null and 'empState :&gt; Microsoft.Teams.AI.State.TempState)&gt;.Temp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TTempState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the temp state.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="User">
      <MemberSignature Language="C#" Value="public TUserState? User { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TUserState User" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Teams.AI.State.ITurnState`3.User" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property User As TUserState" />
      <MemberSignature Language="F#" Value="member this.User : 'UserState" Usage="Microsoft.Teams.AI.State.ITurnState&lt;'ConversationState, 'UserState, 'empState (requires 'ConversationState : null and 'UserState : null and 'empState :&gt; Microsoft.Teams.AI.State.TempState)&gt;.User" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TUserState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the user state.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
