<Type Name="TeamsUserCredential" FullName="Microsoft.TeamsFx.TeamsUserCredential">
  <TypeSignature Language="C#" Value="public class TeamsUserCredential : Azure.Core.TokenCredential, IAsyncDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TeamsUserCredential extends Azure.Core.TokenCredential implements class System.IAsyncDisposable" />
  <TypeSignature Language="DocId" Value="T:Microsoft.TeamsFx.TeamsUserCredential" />
  <TypeSignature Language="VB.NET" Value="Public Class TeamsUserCredential&#xA;Inherits TokenCredential&#xA;Implements IAsyncDisposable" />
  <TypeSignature Language="F#" Value="type TeamsUserCredential = class&#xA;    inherit TokenCredential&#xA;    interface IAsyncDisposable" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.TeamsFx</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Azure.Core.TokenCredential</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IAsyncDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Represent Teams current user's identity, and it is used within Teams tab application.
            </summary>
    <remarks>
            Can only be used within Blazor server for security reason.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TeamsUserCredential (Microsoft.Extensions.Options.IOptions&lt;Microsoft.TeamsFx.Configuration.AuthenticationOptions&gt; authenticationOptions, Microsoft.JSInterop.IJSRuntime jsRuntime, Microsoft.Extensions.Logging.ILogger&lt;Microsoft.TeamsFx.TeamsUserCredential&gt; logger, Microsoft.TeamsFx.Helper.IIdentityClientAdapter identityClientAdapter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Extensions.Options.IOptions`1&lt;class Microsoft.TeamsFx.Configuration.AuthenticationOptions&gt; authenticationOptions, class Microsoft.JSInterop.IJSRuntime jsRuntime, class Microsoft.Extensions.Logging.ILogger`1&lt;class Microsoft.TeamsFx.TeamsUserCredential&gt; logger, class Microsoft.TeamsFx.Helper.IIdentityClientAdapter identityClientAdapter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.TeamsUserCredential.#ctor(Microsoft.Extensions.Options.IOptions{Microsoft.TeamsFx.Configuration.AuthenticationOptions},Microsoft.JSInterop.IJSRuntime,Microsoft.Extensions.Logging.ILogger{Microsoft.TeamsFx.TeamsUserCredential},Microsoft.TeamsFx.Helper.IIdentityClientAdapter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (authenticationOptions As IOptions(Of AuthenticationOptions), jsRuntime As IJSRuntime, logger As ILogger(Of TeamsUserCredential), identityClientAdapter As IIdentityClientAdapter)" />
      <MemberSignature Language="F#" Value="new Microsoft.TeamsFx.TeamsUserCredential : Microsoft.Extensions.Options.IOptions&lt;Microsoft.TeamsFx.Configuration.AuthenticationOptions&gt; * Microsoft.JSInterop.IJSRuntime * Microsoft.Extensions.Logging.ILogger&lt;Microsoft.TeamsFx.TeamsUserCredential&gt; * Microsoft.TeamsFx.Helper.IIdentityClientAdapter -&gt; Microsoft.TeamsFx.TeamsUserCredential" Usage="new Microsoft.TeamsFx.TeamsUserCredential (authenticationOptions, jsRuntime, logger, identityClientAdapter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="authenticationOptions" Type="Microsoft.Extensions.Options.IOptions&lt;Microsoft.TeamsFx.Configuration.AuthenticationOptions&gt;" />
        <Parameter Name="jsRuntime" Type="Microsoft.JSInterop.IJSRuntime" />
        <Parameter Name="logger" Type="Microsoft.Extensions.Logging.ILogger&lt;Microsoft.TeamsFx.TeamsUserCredential&gt;" />
        <Parameter Name="identityClientAdapter" Type="Microsoft.TeamsFx.Helper.IIdentityClientAdapter" />
      </Parameters>
      <Docs>
        <param name="authenticationOptions">Authentication options filled by DI.</param>
        <param name="jsRuntime">JavaScript interop runtime.</param>
        <param name="logger">Logger of TeamsUserCredential Class.</param>
        <param name="identityClientAdapter">Global instance of adaptor to call MSAL.NET library</param>
        <summary>
            Constructor of TeamsUserCredential.
            Developer need to configure TeamsFx service before using this class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InvalidConfiguration">When client id, client secret or OAuth authority is missing or invalid in config.</exception>
      </Docs>
    </Member>
    <Member MemberName="DisposeAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask DisposeAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Threading.Tasks.ValueTask DisposeAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.TeamsUserCredential.DisposeAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function DisposeAsync () As ValueTask" />
      <MemberSignature Language="F#" Value="abstract member DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask&#xA;override this.DisposeAsync : unit -&gt; System.Threading.Tasks.ValueTask" Usage="teamsUserCredential.DisposeAsync " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IAsyncDisposable.DisposeAsync</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Dispose.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetToken">
      <MemberSignature Language="C#" Value="public override Azure.Core.AccessToken GetToken (Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype Azure.Core.AccessToken GetToken(valuetype Azure.Core.TokenRequestContext requestContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.TeamsUserCredential.GetToken(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetToken (requestContext As TokenRequestContext, cancellationToken As CancellationToken) As AccessToken" />
      <MemberSignature Language="F#" Value="override this.GetToken : Azure.Core.TokenRequestContext * System.Threading.CancellationToken -&gt; Azure.Core.AccessToken" Usage="teamsUserCredential.GetToken (requestContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.AccessToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="Azure.Core.TokenRequestContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestContext">To be added.</param>
        <param name="cancellationToken">To be added.</param>
        <summary>
            Sync version is not supported now. Please use GetTokenAsync instead.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTokenAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.ValueTask&lt;Azure.Core.AccessToken&gt; GetTokenAsync (Azure.Core.TokenRequestContext requestContext, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Threading.Tasks.ValueTask`1&lt;valuetype Azure.Core.AccessToken&gt; GetTokenAsync(valuetype Azure.Core.TokenRequestContext requestContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.TeamsUserCredential.GetTokenAsync(Azure.Core.TokenRequestContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetTokenAsync (requestContext As TokenRequestContext, cancellationToken As CancellationToken) As ValueTask(Of AccessToken)" />
      <MemberSignature Language="F#" Value="override this.GetTokenAsync : Azure.Core.TokenRequestContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.ValueTask&lt;Azure.Core.AccessToken&gt;" Usage="teamsUserCredential.GetTokenAsync (requestContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Azure.Core.AccessToken&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestContext" Type="Azure.Core.TokenRequestContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="requestContext">The Azure.Core.TokenRequestContext with authentication information.</param>
        <param name="cancellationToken">The System.Threading.CancellationToken to use.</param>
        <summary>
             Gets an Azure.Core.AccessToken for the specified set of scopes.
             </summary>
        <returns>A valid Azure.Core.AccessToken.</returns>
        <remarks>
             Can only be used within Teams.
             </remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.RuntimeNotSupported">When runtime is not in browser enviroment.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InternalError">When failed to login with unknown error.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.UiRequiredError">When need user consent to get access token.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.ServiceError">When failed to get access token from identity server(AAD).</exception>
        <example>
             For example:
             <code>
             // Get Graph access token for single scope
             await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { "User.Read" }), new CancellationToken());
             // Get Graph access token for multiple scopes
             await teamsUserCredential.GetTokenAsync(new TokenRequestContext(new string[] { "User.Read", "Application.Read.All" }), new CancellationToken());
             </code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUserInfoAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.ValueTask&lt;Microsoft.TeamsFx.UserInfo&gt; GetUserInfoAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Threading.Tasks.ValueTask`1&lt;class Microsoft.TeamsFx.UserInfo&gt; GetUserInfoAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.TeamsUserCredential.GetUserInfoAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function GetUserInfoAsync () As ValueTask(Of UserInfo)" />
      <MemberSignature Language="F#" Value="member this.GetUserInfoAsync : unit -&gt; System.Threading.Tasks.ValueTask&lt;Microsoft.TeamsFx.UserInfo&gt;" Usage="teamsUserCredential.GetUserInfoAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.ValueTask&lt;Microsoft.TeamsFx.UserInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
            Get basic information of current Teams user.
            <example>
            For example:
            <code>
            var user = await teamsUserCredential.GetUserInfoAsync();
            </code></example></summary>
        <returns>Basic user info with user displayName, objectId and preferredUserName.</returns>
        <remarks>To be added.</remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.RuntimeNotSupported">When runtime is not in browser enviroment.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InternalError">When SSO token from Teams client is not valid.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InvalidParameter">When SSO token from Teams client is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoginAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoginAsync (string scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoginAsync(string scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.TeamsUserCredential.LoginAsync(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoginAsync (scopes As String) As Task" />
      <MemberSignature Language="F#" Value="member this.LoginAsync : string -&gt; System.Threading.Tasks.Task" Usage="teamsUserCredential.LoginAsync scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scopes">The string of Microsoft Token scopes of access. Default value is `.default`.</param>
        <summary>
             Popup login page to get user's access token with specific scopes.
             </summary>
        <returns>To be added.</returns>
        <remarks>
             Only works in Teams client app. User will be redirected to the authorization page to login and consent.
             </remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.ServiceError">When simple auth server failed to exchange access token.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.RuntimeNotSupported">When runtime is not in browser enviroment.</exception>
        <example>
             For example:
             <code>
             await teamsUserCredential.LoginAsync("User.Read"); // single scopes using string
             await teamsUserCredential.LoginAsync("User.Read Calendars.Read"); // multiple scopes using string
             </code></example>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InternalError">When failed to login with unknown error.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.ConsentFailed">When user canceled or failed to consent.</exception>
      </Docs>
    </Member>
    <Member MemberName="LoginAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task LoginAsync (string[] scopes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task LoginAsync(string[] scopes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.TeamsFx.TeamsUserCredential.LoginAsync(System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Function LoginAsync (scopes As String()) As Task" />
      <MemberSignature Language="F#" Value="member this.LoginAsync : string[] -&gt; System.Threading.Tasks.Task" Usage="teamsUserCredential.LoginAsync scopes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.TeamsFx</AssemblyName>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scopes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="scopes">The array of Microsoft Token scopes of access. Default value is `[.default]`.</param>
        <summary>
             Popup login page to get user's access token with specific scopes.
             </summary>
        <returns>To be added.</returns>
        <remarks>
             Only works in Teams client APP. User will be redirected to the authorization page to login and consent.
             </remarks>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.ServiceError">When simple auth server failed to exchange access token.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.RuntimeNotSupported">When runtime is not in browser enviroment.</exception>
        <example>
             For example:
             <code>
             await teamsUserCredential.LoginAsync(new string[] { "User.Read" }); // single scope using string array
             await teamsUserCredential.LoginAsync(new string[] { "User.Read Calendars.Read" }); //  multiple scopes using string array
             </code></example>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.InternalError">When failed to login with unknown error.</exception>
        <exception cref="F:Microsoft.TeamsFx.ExceptionCode.ConsentFailed">When user canceled or failed to consent.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
