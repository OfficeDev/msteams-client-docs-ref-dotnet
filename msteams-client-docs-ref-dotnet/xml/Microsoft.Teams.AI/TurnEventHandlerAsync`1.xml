<Type Name="TurnEventHandlerAsync&lt;TState&gt;" FullName="Microsoft.Teams.AI.TurnEventHandlerAsync&lt;TState&gt;">
  <TypeSignature Language="C#" Value="public delegate System.Threading.Tasks.Task&lt;bool&gt; TurnEventHandlerAsync&lt;TState&gt;(ITurnContext turnContext, TState turnState, CancellationToken cancellationToken) where TState : TurnState;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed TurnEventHandlerAsync`1&lt;(class Microsoft.Teams.AI.State.TurnState) TState&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Teams.AI.TurnEventHandlerAsync`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function TurnEventHandlerAsync(Of TState)(turnContext As ITurnContext, turnState As TState, cancellationToken As CancellationToken) As Task(Of Boolean) " />
  <TypeSignature Language="F#" Value="type TurnEventHandlerAsync&lt;'State (requires 'State :&gt; TurnState)&gt; = delegate of ITurnContext * 'State * CancellationToken -&gt; Task&lt;bool&gt;" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Teams.AI</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TState">
      <Constraints>
        <BaseTypeName>Microsoft.Teams.AI.State.TurnState</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
    <Parameter Name="turnState" Type="TState" />
    <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="TState" />
    <param name="turnContext">A strongly-typed context object for this turn.</param>
    <param name="turnState">The turn state object that stores arbitrary data for this turn.</param>
    <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
    <summary>
            Turn event handler to do something before or after a turn is run. Returning false from
            `beforeTurn` lets you prevent the turn from running and returning false from `afterTurn`
            lets you prevent the bots state from being saved.
            <br /><br />
            Returning false from `beforeTurn` does result in the bots state being saved which lets you
            track the reason why the turn was not processed. It also means you can use `beforeTurn` as
            a way to call into the dialog system. For example, you could use the OAuthPrompt to sign the
            user in before allowing the AI system to run.
            </summary>
    <returns>True to continue execution of the current turn. Otherwise, False.</returns>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
