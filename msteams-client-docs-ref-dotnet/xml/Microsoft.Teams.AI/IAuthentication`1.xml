<Type Name="IAuthentication&lt;TState&gt;" FullName="Microsoft.Teams.AI.IAuthentication&lt;TState&gt;">
  <TypeSignature Language="C#" Value="public interface IAuthentication&lt;TState&gt; where TState : TurnState, new()" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAuthentication`1&lt;.ctor (class Microsoft.Teams.AI.State.TurnState) TState&gt;" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Teams.AI.IAuthentication`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IAuthentication(Of TState)" />
  <TypeSignature Language="F#" Value="type IAuthentication&lt;'State (requires 'State :&gt; TurnState and 'State : (new : unit -&gt; 'State))&gt; = interface" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Teams.AI</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TState">
      <Constraints>
        <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
        <BaseTypeName>Microsoft.Teams.AI.State.TurnState</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces />
  <Docs>
    <typeparam name="TState">To be added.</typeparam>
    <summary>
            Handles user sign-in and sign-out.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="IsUserSignedInAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string?&gt; IsUserSignedInAsync (Microsoft.Bot.Builder.ITurnContext turnContext, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; IsUserSignedInAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.IAuthentication`1.IsUserSignedInAsync(Microsoft.Bot.Builder.ITurnContext,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsUserSignedInAsync (turnContext As ITurnContext, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member IsUserSignedInAsync : Microsoft.Bot.Builder.ITurnContext * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="iAuthentication.IsUserSignedInAsync (turnContext, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">The turn context.</param>
        <param name="cancellationToken">The cancellation token</param>
        <summary>
            Check if the user is signed, if they are then return the token.
            </summary>
        <returns>The token if the user is signed. Otherwise null.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUserSignInFailure">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.IAuthentication&lt;TState&gt; OnUserSignInFailure (Func&lt;Microsoft.Bot.Builder.ITurnContext,TState,Microsoft.Teams.AI.Exceptions.AuthException,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Teams.AI.IAuthentication`1&lt;!TState&gt; OnUserSignInFailure(class System.Func`4&lt;class Microsoft.Bot.Builder.ITurnContext, !TState, class Microsoft.Teams.AI.Exceptions.AuthException, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.IAuthentication`1.OnUserSignInFailure(System.Func{Microsoft.Bot.Builder.ITurnContext,`0,Microsoft.Teams.AI.Exceptions.AuthException,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function OnUserSignInFailure (handler As Func(Of ITurnContext, TState, AuthException, Task)) As IAuthentication(Of TState)" />
      <MemberSignature Language="F#" Value="abstract member OnUserSignInFailure : Func&lt;Microsoft.Bot.Builder.ITurnContext, 'State, Microsoft.Teams.AI.Exceptions.AuthException, System.Threading.Tasks.Task (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState and 'State : (new : unit -&gt; 'State))&gt; -&gt; Microsoft.Teams.AI.IAuthentication&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState and 'State : (new : unit -&gt; 'State))&gt;" Usage="iAuthentication.OnUserSignInFailure handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.IAuthentication&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;Microsoft.Bot.Builder.ITurnContext,TState,Microsoft.Teams.AI.Exceptions.AuthException,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler function to call when the user failed to signed in</param>
        <summary>
            The handler function is called when the user sign in flow fails
            </summary>
        <returns>The class itself for chaining purpose</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUserSignInSuccess">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.IAuthentication&lt;TState&gt; OnUserSignInSuccess (Func&lt;Microsoft.Bot.Builder.ITurnContext,TState,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Teams.AI.IAuthentication`1&lt;!TState&gt; OnUserSignInSuccess(class System.Func`3&lt;class Microsoft.Bot.Builder.ITurnContext, !TState, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.IAuthentication`1.OnUserSignInSuccess(System.Func{Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Function OnUserSignInSuccess (handler As Func(Of ITurnContext, TState, Task)) As IAuthentication(Of TState)" />
      <MemberSignature Language="F#" Value="abstract member OnUserSignInSuccess : Func&lt;Microsoft.Bot.Builder.ITurnContext, 'State, System.Threading.Tasks.Task (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState and 'State : (new : unit -&gt; 'State))&gt; -&gt; Microsoft.Teams.AI.IAuthentication&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState and 'State : (new : unit -&gt; 'State))&gt;" Usage="iAuthentication.OnUserSignInSuccess handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.IAuthentication&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;Microsoft.Bot.Builder.ITurnContext,TState,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">The handler function to call when the user has successfully signed in</param>
        <summary>
            The handler function is called when the user has successfully signed in
            </summary>
        <returns>The class itself for chaining purpose</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignInUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;string?&gt; SignInUserAsync (Microsoft.Bot.Builder.ITurnContext context, TState state, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;string&gt; SignInUserAsync(class Microsoft.Bot.Builder.ITurnContext context, !TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.IAuthentication`1.SignInUserAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignInUserAsync (context As ITurnContext, state As TState, Optional cancellationToken As CancellationToken = Nothing) As Task(Of String)" />
      <MemberSignature Language="F#" Value="abstract member SignInUserAsync : Microsoft.Bot.Builder.ITurnContext * 'State * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;string&gt;" Usage="iAuthentication.SignInUserAsync (context, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="context">Current turn context.</param>
        <param name="state">Application state.</param>
        <param name="cancellationToken">The cancellation token</param>
        <summary>
            Signs in a user.
            This method will be called automatically by the Application class.
            </summary>
        <returns>The authentication token if user is signed in. Otherwise returns null. In that case the bot will attempt to sign the user in.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SignOutUserAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task SignOutUserAsync (Microsoft.Bot.Builder.ITurnContext context, TState state, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SignOutUserAsync(class Microsoft.Bot.Builder.ITurnContext context, !TState state, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.IAuthentication`1.SignOutUserAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function SignOutUserAsync (context As ITurnContext, state As TState, Optional cancellationToken As CancellationToken = Nothing) As Task" />
      <MemberSignature Language="F#" Value="abstract member SignOutUserAsync : Microsoft.Bot.Builder.ITurnContext * 'State * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="iAuthentication.SignOutUserAsync (context, state, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="state" Type="TState" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="context">Current turn context.</param>
        <param name="state">Application state.</param>
        <param name="cancellationToken">The cancellation token</param>
        <summary>
            Signs out a user.
            </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
