<Type Name="AI&lt;TState&gt;" FullName="Microsoft.Teams.AI.AI.AI&lt;TState&gt;">
  <TypeSignature Language="C#" Value="public class AI&lt;TState&gt; where TState : TurnState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AI`1&lt;(class Microsoft.Teams.AI.State.TurnState) TState&gt; extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Teams.AI.AI.AI`1" />
  <TypeSignature Language="VB.NET" Value="Public Class AI(Of TState)" />
  <TypeSignature Language="F#" Value="type AI&lt;'State (requires 'State :&gt; TurnState)&gt; = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Teams.AI</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TState">
      <Constraints>
        <BaseTypeName>Microsoft.Teams.AI.State.TurnState</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TState">Optional. Type of the turn state.</typeparam>
    <summary>
            AI System.
            </summary>
    <remarks>
            The AI system is responsible for generating plans, moderating input and output, and
            generating prompts. It can be used free standing or routed to by the Application object.
            </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AI (Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt; options, Microsoft.Extensions.Logging.ILoggerFactory? loggerFactory = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Microsoft.Teams.AI.AI.AIOptions`1&lt;!TState&gt; options, class Microsoft.Extensions.Logging.ILoggerFactory loggerFactory) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.AI`1.#ctor(Microsoft.Teams.AI.AI.AIOptions{`0},Microsoft.Extensions.Logging.ILoggerFactory)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (options As AIOptions(Of TState), Optional loggerFactory As ILoggerFactory = Nothing)" />
      <MemberSignature Language="F#" Value="new Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt; : Microsoft.Teams.AI.AI.AIOptions&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt; * Microsoft.Extensions.Logging.ILoggerFactory -&gt; Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;" Usage="new Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt; (options, loggerFactory)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="options" Type="Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt;" />
        <Parameter Name="loggerFactory" Type="Microsoft.Extensions.Logging.ILoggerFactory" />
      </Parameters>
      <Docs>
        <param name="options">The options to configure.</param>
        <param name="loggerFactory">Optional. The logger factory to use.</param>
        <summary>
            Creates an instance of the <see cref="T:Microsoft.Teams.AI.AI.AI`1" /> class.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsAction">
      <MemberSignature Language="C#" Value="public bool ContainsAction (string action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsAction(string action) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.AI`1.ContainsAction(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function ContainsAction (action As String) As Boolean" />
      <MemberSignature Language="F#" Value="member this.ContainsAction : string -&gt; bool" Usage="aI.ContainsAction action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="action">Name of the action to check.</param>
        <summary>
            Checks to see if the AI system has a handler for a given action.
            </summary>
        <returns>True if the AI system has a handler for the given action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportActions">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.AI.AI&lt;TState&gt; ImportActions (object instance);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Teams.AI.AI.AI`1&lt;!TState&gt; ImportActions(object instance) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.AI`1.ImportActions(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function ImportActions (instance As Object) As AI(Of TState)" />
      <MemberSignature Language="F#" Value="member this.ImportActions : obj -&gt; Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;" Usage="aI.ImportActions instance" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.AI.AI&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="instance">Instance of a class containing these functions.</param>
        <summary>
            Import a set of Actions from the given class instance. The functions must have the `Action` attribute.
            Once these functions are imported, the AI module will have access to these functions.
            </summary>
        <returns>The current instance object.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="Moderator">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.AI.Moderator.IModerator&lt;TState&gt; Moderator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Teams.AI.AI.Moderator.IModerator`1&lt;!TState&gt; Moderator" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Teams.AI.AI.AI`1.Moderator" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Moderator As IModerator(Of TState)" />
      <MemberSignature Language="F#" Value="member this.Moderator : Microsoft.Teams.AI.AI.Moderator.IModerator&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;" Usage="Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;.Moderator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.AI.Moderator.IModerator&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the moderator being used by the AI system.
            </summary>
        <value>To be added.</value>
        <remarks>
            The default moderator simply allows all messages and plans through without intercepting them.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt; Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Teams.AI.AI.AIOptions`1&lt;!TState&gt; Options" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Teams.AI.AI.AI`1.Options" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Options As AIOptions(Of TState)" />
      <MemberSignature Language="F#" Value="member this.Options : Microsoft.Teams.AI.AI.AIOptions&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;" Usage="Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.AI.AIOptions&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the options for the AI system.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Planner">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.AI.Planners.IPlanner&lt;TState&gt; Planner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Microsoft.Teams.AI.AI.Planners.IPlanner`1&lt;!TState&gt; Planner" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Teams.AI.AI.AI`1.Planner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Planner As IPlanner(Of TState)" />
      <MemberSignature Language="F#" Value="member this.Planner : Microsoft.Teams.AI.AI.Planners.IPlanner&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;" Usage="Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;.Planner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.AI.Planners.IPlanner&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Returns the planner being used by the AI system.
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterAction">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.AI.AI&lt;TState&gt; RegisterAction (string name, Microsoft.Teams.AI.AI.Action.IActionHandler&lt;TState&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Teams.AI.AI.AI`1&lt;!TState&gt; RegisterAction(string name, class Microsoft.Teams.AI.AI.Action.IActionHandler`1&lt;!TState&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.AI`1.RegisterAction(System.String,Microsoft.Teams.AI.AI.Action.IActionHandler{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterAction (name As String, handler As IActionHandler(Of TState)) As AI(Of TState)" />
      <MemberSignature Language="F#" Value="member this.RegisterAction : string * Microsoft.Teams.AI.AI.Action.IActionHandler&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt; -&gt; Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;" Usage="aI.RegisterAction (name, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.AI.AI&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="handler" Type="Microsoft.Teams.AI.AI.Action.IActionHandler&lt;TState&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the action.</param>
        <param name="handler">The action handler function.</param>
        <summary>
            Registers a handler for a named action.
            </summary>
        <returns>The current instance object.</returns>
        <remarks>
            The AI systems planner returns plans that are made up of a series of commands or actions
            that should be performed. Registering a handler lets you provide code that should be run in
            response to one of the predicted actions.
            
            Plans support a DO command which specifies the name of an action to call and an optional
            set of entities that should be passed to the action. The internal plan executor will call
            the registered handler for the action passing in the current context, state, and entities.
            
            Additionally, the AI system itself uses actions to handle things like unknown actions,
            flagged input, and flagged output. You can override these actions by registering your own
            handler for them. The names of the built-in actions are available as static properties on
            the AI class.
            </remarks>
        <exception cref="T:System.InvalidOperationException" />
      </Docs>
    </Member>
    <Member MemberName="RegisterDefaultAction">
      <MemberSignature Language="C#" Value="public Microsoft.Teams.AI.AI.AI&lt;TState&gt; RegisterDefaultAction (string name, Microsoft.Teams.AI.AI.Action.IActionHandler&lt;TState&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Microsoft.Teams.AI.AI.AI`1&lt;!TState&gt; RegisterDefaultAction(string name, class Microsoft.Teams.AI.AI.Action.IActionHandler`1&lt;!TState&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.AI`1.RegisterDefaultAction(System.String,Microsoft.Teams.AI.AI.Action.IActionHandler{`0})" />
      <MemberSignature Language="VB.NET" Value="Public Function RegisterDefaultAction (name As String, handler As IActionHandler(Of TState)) As AI(Of TState)" />
      <MemberSignature Language="F#" Value="member this.RegisterDefaultAction : string * Microsoft.Teams.AI.AI.Action.IActionHandler&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt; -&gt; Microsoft.Teams.AI.AI.AI&lt;'State (requires 'State :&gt; Microsoft.Teams.AI.State.TurnState)&gt;" Usage="aI.RegisterDefaultAction (name, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Teams.AI.AI.AI&lt;TState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="handler" Type="Microsoft.Teams.AI.AI.Action.IActionHandler&lt;TState&gt;" />
      </Parameters>
      <Docs>
        <param name="name">The name of the action.</param>
        <param name="handler">The action handler function.</param>
        <summary>
            Registers the default handler for a named action.
            </summary>
        <returns>The current instance object.</returns>
        <remarks>
            Default handlers can be replaced by calling the RegisterAction() method with the same name.
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;bool&gt; RunAsync (Microsoft.Bot.Builder.ITurnContext turnContext, TState turnState, DateTime? startTime = default, int stepCount = 0, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;bool&gt; RunAsync(class Microsoft.Bot.Builder.ITurnContext turnContext, !TState turnState, valuetype System.Nullable`1&lt;valuetype System.DateTime&gt; startTime, int32 stepCount, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Teams.AI.AI.AI`1.RunAsync(Microsoft.Bot.Builder.ITurnContext,`0,System.Nullable{System.DateTime},System.Int32,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Function RunAsync (turnContext As ITurnContext, turnState As TState, Optional startTime As Nullable(Of DateTime) = Nothing, Optional stepCount As Integer = 0, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Boolean)" />
      <MemberSignature Language="F#" Value="member this.RunAsync : Microsoft.Bot.Builder.ITurnContext * 'State * Nullable&lt;DateTime&gt; * int * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="aI.RunAsync (turnContext, turnState, startTime, stepCount, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Teams.AI</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="turnContext" Type="Microsoft.Bot.Builder.ITurnContext" />
        <Parameter Name="turnState" Type="TState" />
        <Parameter Name="startTime" Type="System.Nullable&lt;System.DateTime&gt;" />
        <Parameter Name="stepCount" Type="System.Int32" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="turnContext">Current turn context.</param>
        <param name="turnState">Current turn state.</param>
        <param name="startTime">Optional. Time the AI system started running.</param>
        <param name="stepCount">Number of steps that have been executed.</param>
        <param name="cancellationToken">A cancellation token that can be used by other objects
            or threads to receive notice of cancellation.</param>
        <summary>
            Calls the configured planner to generate a plan and executes the plan that is returned.
            </summary>
        <returns>True if the plan was completely executed, otherwise false.</returns>
        <remarks>
            The moderator is called to review the input and output of the plan. If the moderator flags
            the input or output then the appropriate action is called. If the moderator allows the input
            and output then the plan is executed.
            </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
